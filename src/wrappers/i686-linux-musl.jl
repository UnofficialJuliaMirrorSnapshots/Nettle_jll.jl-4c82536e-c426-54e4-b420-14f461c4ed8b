# Autogenerated wrapper script for Nettle_jll for i686-linux-musl
export libhogweed, libnettle, nettle_hash

using GMP_jll
## Global variables
const PATH_list = String[]
const LIBPATH_list = String[]
PATH = ""
LIBPATH = ""
LIBPATH_env = "LD_LIBRARY_PATH"

# Relative path to `libhogweed`
const libhogweed_splitpath = ["lib", "libhogweed.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libhogweed_path = ""

# libhogweed-specific global declaration
# This will be filled out by __init__()
libhogweed_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libhogweed = "libhogweed.so.4"


# Relative path to `libnettle`
const libnettle_splitpath = ["lib", "libnettle.so"]

# This will be filled out by __init__() for all products, as it must be done at runtime
libnettle_path = ""

# libnettle-specific global declaration
# This will be filled out by __init__()
libnettle_handle = C_NULL

# This must be `const` so that we can use it with `ccall()`
const libnettle = "libnettle.so.6"


# Relative path to `nettle_hash`
const nettle_hash_splitpath = ["bin", "nettle-hash"]

# This will be filled out by __init__() for all products, as it must be done at runtime
nettle_hash_path = ""

# nettle_hash-specific global declaration
function nettle_hash(f::Function; adjust_PATH::Bool = true, adjust_LIBPATH::Bool = true)
    global PATH, LIBPATH
    env_mapping = Dict{String,String}()
    if adjust_PATH
        if !isempty(get(ENV, "PATH", ""))
            env_mapping["PATH"] = string(ENV["PATH"], ':', PATH)
        else
            env_mapping["PATH"] = PATH
        end
    end
    if adjust_LIBPATH
        if !isempty(get(ENV, LIBPATH_env, ""))
            env_mapping[LIBPATH_env] = string(ENV[LIBPATH_env], ':', LIBPATH)
        else
            env_mapping[LIBPATH_env] = LIBPATH
        end
    end
    withenv(env_mapping...) do
        f(nettle_hash_path)
    end
end


"""
Open all libraries
"""
function __init__()
    global prefix = abspath(joinpath(@__DIR__, ".."))

    # Initialize PATH and LIBPATH environment variable listings
    global PATH_list, LIBPATH_list

    append!(PATH_list, GMP_jll.PATH_list)
    append!(LIBPATH_list, GMP_jll.LIBPATH_list)
    global libhogweed_path = abspath(joinpath(artifact"Nettle", libhogweed_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libhogweed_handle = dlopen(libhogweed_path)
    push!(LIBPATH_list, dirname(libhogweed_path))

    global libnettle_path = abspath(joinpath(artifact"Nettle", libnettle_splitpath...))

    # Manually `dlopen()` this right now so that future invocations
    # of `ccall` with its `SONAME` will find this path immediately.
    global libnettle_handle = dlopen(libnettle_path)
    push!(LIBPATH_list, dirname(libnettle_path))

    global nettle_hash_path = abspath(joinpath(artifact"Nettle", nettle_hash_splitpath...))

    push!(PATH_list, dirname(nettle_hash_path))
    # Filter out duplicate and empty entries in our PATH and LIBPATH entries
    filter!(!isempty, unique!(PATH_list))
    filter!(!isempty, unique!(LIBPATH_list))
    global PATH = join(PATH_list, ':')
    global LIBPATH = join(LIBPATH_list, ':')

    # Add each element of LIBPATH to our DL_LOAD_PATH (necessary on platforms
    # that don't honor our "already opened" trick)
    #for lp in LIBPATH_list
    #    push!(DL_LOAD_PATH, lp)
    #end
end  # __init__()

